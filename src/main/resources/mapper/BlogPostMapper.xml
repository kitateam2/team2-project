<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- 내 블로그 처리 SQL -->
  <mapper namespace="com.sesoc.team2.dao.BlogPostMapper">
  
  	<!-- 게시글 쓰기 -->
  	<insert id="post_write" parameterType="BlogPostVO">
  		insert into blog_post (
  			post_no
  			, post_title
  			, post_contents
  			, post_uploaddate
  			, user_id
  			<if test="post_originalfile != null and post_savedfile != null">
  			, post_originalfile
  			, post_savedfile
  			</if>
  			)
  		values(
  			post_no_seq.nextval
  			, #{post_title}
  			, #{post_contents}
  			, sysdate
  			, #{user_id}
  			<if test="post_originalfile != null and post_savedfile != null">
  			, #{post_originalfile}
  			, #{post_savedfile}
  			</if>
  			)
  	</insert>
  	
  	<!-- 게시글 목록 읽기 -->
  	<select id="postlist" parameterType="String" resultType="BlogPostVO">
  		select
  			*
  		from
  			blog_post
  		where
  			user_id = #{user_id}
  		order by
  			post_no desc
  			<!-- 아이디로 불러온 사람 글만 보이게 해야하는 where줘야함 -->
  	</select>
  	
  	<!-- 게시글 하나 읽기 -->
  	<select id="one_post" parameterType="int" resultType="BlogPostVO">
	  	select
	  		*
	  	from
	  		blog_post
	  	where
	  		post_no = #{post_no}
  	</select>
  	
  	<!-- 게시글 삭제 -->
  	<delete id="post_delete" parameterType="BlogPostVO">
		delete
		from
			blog_post
		where
			post_no = #{post_no}
			and user_id = #{user_id}
	</delete>
	
	<!-- 게시글 수정 -->
	<update id="post_edit" parameterType="BlogPostVO">
		update
			blog_post
		set
  			post_title = #{post_title}
  			, post_contents = #{post_contents}
  			, post_uploaddate = sysdate
  			, post_originalfile = #{post_originalfile}
  			, post_savedfile = #{post_savedfile}
  		where
  			post_no = #{post_no}
			and user_id = #{user_id}
	</update>
	
	<!-- 조회수 1 증가 -->
	<update id="add_hits" parameterType="int">
		update
			blog_post
		set
			post_hits = post_hits + 1
		where
			post_no = #{post_no}
	</update>
	
	<!-- 게시글에 댓글 작성 -->
	<insert id="post_comment_insert"  parameterType="PostCommentVO">
	 insert into post_comment (
		post_comment_no
		, post_no
		, post_comment_writter
	 	, post_comment_content
		  )
		values(
		post_comment_seq.nextval
		, #{post_no}
		, #{post_comment_writter}
		, #{post_comment_content}
		)
	</insert>
	
	<!-- 게시글에 댓글 불러오기 -->
	<select id="post_comment_list" parameterType="int" resultType="PostCommentVO">
		select
			post_comment_no
			, post_no
			, post_comment_writter
	 		, post_comment_content
	 		, to_char(post_comment_date, 'YYYY-MM-DD') post_comment_date
	 	from
	 		post_comment
	 	where
	 		post_no = #{post_no}
	 	order by
	 		post_comment_no desc
	</select>
	
	<!-- 게시글 댓글 삭제 -->
	<delete id="post_comment_delete" parameterType="PostCommentVO">
		delete
		from
			post_comment
		where
			post_comment_no = #{post_comment_no}
			and post_comment_writter = #{post_comment_writter}
	</delete>
  </mapper>